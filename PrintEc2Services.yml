Resources:
  CreateAmiForEc2:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              # EC2 instance details
              ec2_instance_id = 'i-01dd11a7324732***'
              command = 'systemctl list-units --type=service'

              # SSM client
              ssm_client = boto3.client('ssm')

              try:
                  # Execute command on EC2 instance using SSM Run Command
                  response = ssm_client.send_command(
                      InstanceIds=[ec2_instance_id],
                      DocumentName='AWS-RunShellScript',
                      Parameters={'commands': [command]},
                  )

                  command_id = response['Command']['CommandId']

                  # Wait for the command to complete
                  waiter = ssm_client.get_waiter('command_executed')
                  waiter.wait(CommandId=command_id, InstanceId=ec2_instance_id)

                  # Get the command invocation details
                  command_invocation = ssm_client.get_command_invocation(CommandId=command_id, InstanceId=ec2_instance_id)

                  if command_invocation['Status'] == 'Success':
                      # Get the command output
                      command_output = command_invocation['StandardOutputContent']
                      print(command_output)
                  else:
                      # Command execution failed
                      print(f"Command execution failed. Status: {command_invocation['Status']}")
              
              except Exception as e:
                  print(f"An error occurred: {str(e)}")


      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:GetCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommands
                Resource: "*"
